schema {
  query: Query
}

scalar Time

#########
# Query #
#########

type Query {
  # Query for specific repository and associated analytics
  repo(
    owner: String!,
    name: String!,
    host: RepositoryHost = GITHUB,
  ): RepositoryAnalytics

  # Query for repositories by owner
  repos(
    owner: String!,
    host: RepositoryHost = GITHUB,
  ): [Repository!]

  # Query for current service status
  serviceStatus: ServiceStatus!
}

###########
# Service #
###########

type ServiceStatus {
  build: String!
  deployed: Time!
}

################
# Repositories #
################

type Repository {
  id: Int!
  owner: String!
  name: String!
  description: String!
}

type RepositoryAnalytics {
  repository: Repository!

  burndown(
    type: BurndownType = GLOBAL,
  ): Burndown
}

enum RepositoryHost {
  GITHUB
  GITLAB
  BITBUCKET
}

#############
# Burndowns #
#############

enum BurndownType {
  GLOBAL
  FILE
  AUTHOR
  ALERT
}

type GlobalBurndown {
  repoID: Int!
  type: BurndownType!
  entries: [BurndownEntry!]
}

type AuthorBurndown {
  repoID: Int!
  type: BurndownType!
  author(
    author: String!,
  ): [BurndownEntry!]
}

type FileBurndown {
  repoID: Int!
  type: BurndownType!
  file(
    # if filename is provided, return burndown for single file, otherwise return
    # per file
    filename: String,
  ): [FileBurndownEntry!]
}

type BurndownAlert {
  repoID: Int!
  type: BurndownType!
  alert: String!
}

union Burndown = GlobalBurndown | AuthorBurndown | FileBurndown | BurndownAlert

type BurndownEntry {
  start: Time!

  # TODO: add Long type? tbh not sure if int64 is really justified at all here
  # https://gqlgen.com/reference/scalars/#custom-scalars-for-types-you-don-t-control
  bands: [Int!]!
}

type FileBurndownEntry {
  file: String!
  entry: BurndownEntry!
}
